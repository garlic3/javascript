

/* 
    전역 객체 : 자바스크립트 엔진에 의해 가장 먼저 생성되는 특수 객체
    클라이언트 사이드 환경(브라우저) : window
    서버 사이드 환경(node.js) : global

    전역 객체는 표준 빌트인 객체와 환경에 따른 호스트 객체, var로 선언한 전역변수와 전역함수를 프로퍼티로 가짐
*/

/* 
    전역변수 
    1. 암묵적 결합 허용(모든 코드가 전역변수를 참조하고 변경할수 있음)
    2. 긴 생명주기 -> 메모리 리소스 소비가 길다
    3. 스코프 체인 상에서 종점에 존재(전역 변수의 검색속도가 가장 느림)
    4. 네임스페이스 오염(파일이 분리되어 있다해도 하나의 전역스코프를 공유)

    -> 변수의 스코프는 좁을수록 좋음

    1. 즉시 실행 함수 사용
    2. 네임스페이스 객체 사용
    3. 모듈 패턴 사용
        캡슐화 : 프로퍼티와 메소드를 하나로 묶는것 -> 정보 은닉

    ES6 모듈은 파일 자체의 독자적인 모듈 스코프를 제공
*/

/* 
    var 사용의 문제점
    1. 변수 중복 선언 허용
    2. 함수 레벨 스코프(함수 코드 블록만 지역 스코프로 인정함)
    3. 변수 호이스팅

    let 키워드
    1. 변수 중복 선언 금지
    2. 블록 레벨 스코프
    3. 변수 호이스팅
        let으로 선언된 변수는 선언단계와 초기화 단계가 분리되어 진행됨
        -> 초기화 단계는 변수 선언문에 도달했을때 실행됨
    4. let 키워드로 선언한 변수는 전역 객체의 프로퍼티가 아님

    const 키워드
    1. const로 선언한 변수는 반드시 선언과 동시에 초기화 해야함
    2. 재할당 금지

*/

// ex15-19
// const로 선언된 변수에 객체를 할당한 경우 값 변경 가능

const person = {
    name : 'seo'
};

person.name = 'min';
console.log(person);